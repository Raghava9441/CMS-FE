{"version":3,"mappings":"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","names":["fetchTeachers","params","dispatch","queryParams","parseQueryParams","fetchTeachersStart","response","teacherApi","fetchTeachersSuccess","error","fetchTeachersFailure","toast","_b","_a","fetchTeacherById","id","fetchTeacherByIdStart","fetchTeacherByIdSuccess","createTeachers","organization","createTeacherStart","createTeacherSuccess","updateTeachers","teacher","updateTeacherStart","updateTeacherSuccess","deleteTeachers","deleteTeacherStart","deleteTeacherSuccess","TeacherActions","TeacherForm","lazy","__vitePreload","TeacherPage","route","routeData","canActivate","navigate","useNavigate","useDispatch","teachers","useSelector","state","routeparams","useParams","data","loading","useRouteData","columns","useMemo","rowModesModel","setRowModesModel","useState","modalTitle","setModalTitle","selectedRow","setSelectedRow","open","setOpen","isViewingProfile","useLocation","fetchTeachersCallback","useCallback","setParams","usePaginationParams","onParamasChange","handleAdd","handleOpen","handleEdit","selectedTeacher","handleView","appRoutes","handleDelete","handleSave","handleClose","handleReloadData","totalRows","jsx","Box","Outlet","jsxs","Fragment","ReusableDataGrid","GenericModal","Suspense"],"ignoreList":[],"sources":["../../src/redux/actions/teacherActions.ts","../../src/pages/Teacher.page.tsx"],"sourcesContent":["import { AppDispatch } from '../store';\nimport { toast } from 'react-toastify';\nimport { teacherApi } from '@api/api';\nimport { Teacher } from '@models/teacher.modals';\nimport { createTeacherStart, createTeacherSuccess, deleteTeacherStart, deleteTeacherSuccess, fetchTeacherByIdStart, fetchTeacherByIdSuccess, fetchTeachersFailure, fetchTeachersStart, fetchTeachersSuccess, updateTeacherStart, updateTeacherSuccess } from '@redux/slices/Teacher.slice';\nimport { Params } from '@models/pagination.modals';\nimport { parseQueryParams } from '@utils/parseQueryParams';\n\nconst fetchTeachers = (params:Params) => async (dispatch: AppDispatch) => {\n    try {\n        const queryParams = parseQueryParams(params);\n        dispatch(fetchTeachersStart());\n        const response = await teacherApi.getTeachers(queryParams);\n        dispatch(fetchTeachersSuccess(response.data.data));\n    } catch (error) {\n        dispatch(fetchTeachersFailure());\n        toast.error(error.response?.data?.data || 'Failed to fetch organizations', {\n            autoClose: 3000,\n        });\n    }\n};\n\nconst fetchTeacherById = (id: string) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(fetchTeacherByIdStart()); // Set loading state to true\n        const response = await teacherApi.getTeacherById(id);\n        dispatch(fetchTeacherByIdSuccess(response.data.data)); // Pass data to success action\n    } catch (error) {\n        dispatch(fetchTeachersFailure());\n\n        toast.error(error.response.data.data || 'Failed to fetch organization', {\n            autoClose: 3000, // Auto close after 3 seconds\n        });\n    }\n};\n\nconst createTeachers = (organization: Omit<Teacher, 'createdAt' | 'updatedAt'>) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(createTeacherStart()); // Set loading state to true\n        const response = await teacherApi.createTeacher(organization);\n        dispatch(createTeacherSuccess(response.data.data)); // Pass data to success action\n        return response.data;\n    } catch (error) {\n        dispatch(fetchTeachersFailure());\n\n        toast.error(error.response.data.data || 'Failed to fetch organization', {\n            autoClose: 3000, // Auto close after 3 seconds\n        });\n    }\n};\n\nconst updateTeachers = (teacher: Omit<Teacher, 'createdAt' | 'updatedAt'>) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(updateTeacherStart()); // Set loading state to true\n        if (teacher._id) {\n            const response = await teacherApi.updateTeacher(teacher, teacher._id);\n            dispatch(updateTeacherSuccess(response.data.data)); // Pass data to success action\n            return response.data;\n        } else {\n            throw new Error('Teacher ID is required for update');\n        }\n    } catch (error) {\n        dispatch(fetchTeachersFailure());\n\n        if (error instanceof Error) {\n            toast.error(error.message || 'Failed to fetch organization', {\n                autoClose: 3000, // Auto close after 3 seconds\n            });\n        }\n    };\n}\n\nconst deleteTeachers = (id: string) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(deleteTeacherStart());\n        const response = await teacherApi.deleteTeacher(id);\n        dispatch(deleteTeacherSuccess(id));\n        toast.info(response.message || 'Organization deleted successfully', {\n            autoClose: 3000,\n        });\n    } catch (error) {\n        dispatch(fetchTeachersFailure());\n\n        console.log(error)\n        toast.error(error.response.data.data || 'Failed to fetch organization', {\n            autoClose: 3000,\n        });\n    }\n};\n\n\nexport const TeacherActions = {\n    fetchTeachers,\n    fetchTeacherById,\n    createTeachers,\n    updateTeachers,\n    deleteTeachers,\n}","import GenericModal from \"@components/GenericModal\"\nimport { ReusableDataGrid } from \"@components/ReusableDataGrid\"\nimport { Box } from \"@mui/material\"\nimport { GridColDef, GridRowModesModel } from \"@mui/x-data-grid\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { AppDispatch, RootState } from \"@redux/store\"\nimport { lazy, Suspense, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { TeacherActions } from \"@redux/actions/teacherActions\"\nimport { usePaginationParams } from \"@hooks/usePaginationParams\"\nimport { Params } from \"@models/pagination.modals\"\nimport { Outlet, useLocation, useNavigate, useParams } from \"react-router-dom\"\nimport appRoutes from \"@routes/routePaths\"\nimport { RouteConfig } from \"@models/routes.types\"\nimport { useRouteData } from \"@hooks/useRouteData\"\nconst TeacherForm = lazy(() => import(\"@components/Forms/Teacher.Form\"));\n\ninterface TeacherPageProps {\n    route: RouteConfig;\n    routeData?: any;\n    canActivate?: boolean;\n}\n\nfunction TeacherPage({ route, routeData, canActivate }: TeacherPageProps) {\n    console.log(\"routeData\", routeData)\n    console.log(canActivate)\n    const navigate = useNavigate()\n    const dispatch = useDispatch<AppDispatch>();\n    const teachers = useSelector((state: RootState) => state.teacher.data);\n    const routeparams = useParams();\n    const { data, loading, error, refetch } = useRouteData(route, routeparams);\n    console.log(\"data\", data)\n\n    const columns: GridColDef[] = useMemo(() => [\n        { field: 'name', headerName: 'Teacher Name', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'phone', headerName: 'Contact Phone', flex: 1, editable: true, headerClassName: 'theme--header' },\n        {\n            field: 'qualifications',\n            headerName: 'Qualifications',\n            flex: 1,\n            editable: true,\n            headerClassName: 'theme--header'\n        },\n        { field: 'officeHours', headerName: 'Office Hours', flex: 1, editable: true, headerClassName: 'theme--header' },\n\n        { field: 'experience', headerName: 'Experience', flex: 1, editable: true, headerClassName: 'theme--header' },\n        // {\n        //     field: 'coursesTaught',\n        //     headerName: 'Courses Taught',\n        //     flex: 1,\n        //     editable: true,\n        //     headerClassName: 'theme--header'\n        // },\n        // {\n        //     field: 'performanceReviews',\n        //     headerName: 'Performance Reviews',\n        //     flex: 1,\n        //     editable: true,\n        //     headerClassName: 'theme--header'\n        // },\n        // { field: 'specialResponsibilities', headerName: 'Special Responsibilities', flex: 1, editable: true, headerClassName: 'theme--header' },\n        // { field: 'createdAt', headerName: 'Created At', flex: 1, editable: false, headerClassName: 'theme--header' },\n        // { field: 'updatedAt', headerName: 'Updated At', flex: 1, editable: false, headerClassName: 'theme--header' },\n    ], []);\n\n    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\n    const [modalTitle, setModalTitle] = useState<string>('');\n    const [selectedRow, setSelectedRow] = useState<any>(null);\n    const [open, setOpen] = useState(false);\n\n    const location = useLocation();\n    const isViewingProfile = location.pathname.includes('/teachers/profile');\n\n    // const { loading } = useSelector((state: RootState) => state.teacher);\n\n    const fetchTeachersCallback = useCallback(\n        (params: any) => {\n            dispatch(TeacherActions.fetchTeachers(params));\n        },\n        [dispatch]\n    );\n\n    const { params, setParams } = usePaginationParams(\n        {\n            page: 1,\n            limit: 10,\n            sortBy: undefined,\n            sortOrder: undefined,\n            searchTerm: undefined,\n            filters: {},\n        },\n        fetchTeachersCallback\n    );\n\n\n\n\n    const onParamasChange = (params: Params) => {\n        setParams(params);\n    };\n\n    const handleAdd = () => {\n        setSelectedRow(null);\n        setModalTitle('Add Teacher');\n        handleOpen();\n    };\n\n    const handleEdit = (id: string) => {\n        const selectedTeacher = teachers?.teachers.find((teacher: any) => teacher._id === id);\n        setSelectedRow(selectedTeacher || null);\n        setModalTitle('Edit Teacher');\n        handleOpen();\n    };\n\n    const handleView = (id: string) => {\n        const selectedTeacher = teachers?.teachers.find((teacher: any) => teacher._id === id);\n        if (!selectedTeacher) return\n        navigate(appRoutes.TEACHER_PROFILE.replace(\":id\", selectedTeacher?._id))\n    };\n\n    const handleDelete = async (id: string) => {\n        dispatch(TeacherActions.deleteTeachers(id));\n    };\n\n    const handleSave = async (data: any) => {\n        if (selectedRow) {\n            dispatch(TeacherActions.updateTeachers({ ...data, _id: selectedRow._id }));\n        } else {\n            dispatch(TeacherActions.createTeachers(data));\n        }\n        handleClose();\n    };\n\n    const handleReloadData = () => {\n        dispatch(TeacherActions.fetchTeachers(params));\n    };\n\n    const handleOpen = () => setOpen(true);\n\n    const handleClose = () => setOpen(false);\n    const totalRows = teachers?.totalTeachers || 0;\n    return (\n        <Box sx={{ width: '100%', height: '100%' }}>\n            {isViewingProfile ? (\n                <Outlet /> // Only render nested page\n            ) : (\n                <>\n                    <ReusableDataGrid\n                        columns={columns}\n                        onAdd={handleAdd}\n                        onDelete={handleDelete}\n                        onEdit={handleEdit}\n                        rows={teachers?.teachers ?? []}\n                        rowModesModel={rowModesModel}\n                        setRowModesModel={setRowModesModel}\n                        loading={loading}\n                        reloadData={handleReloadData}\n                        totalRows={totalRows}\n                        paginationModel={{\n                            page: params.page - 1,\n                            pageSize: params.limit,\n                        }}\n                        onParamsChange={onParamasChange}\n                        onView={handleView}\n                    />\n                    <GenericModal open={open} onClose={handleClose} title={modalTitle}>\n                        {\n                            open && <Suspense fallback={<div>Loading form...</div>}>\n                                <TeacherForm\n                                    initialValues={selectedRow}\n                                    onSubmit={handleSave}\n                                    onClose={handleClose}\n                                />\n                            </Suspense>\n                        }\n                    </GenericModal>\n                </>\n            )}\n        </Box>\n    );\n}\nexport default TeacherPage"],"file":"assets/Teacher.page-CoPLUe3j.js"}