{"version":3,"file":"Settings.page-nuyvASYs.js","sources":["../../src/pages/Settings.page.tsx"],"sourcesContent":["import { Box, ListItem, ListItemButton, ListItemIcon, ListItemText, Stack } from \"@mui/material\";\nimport { findRouteByPath } from \"@utils/routes.utills\"; // Assuming this utility exists and works as expected\nimport { routeConfig } from \"../config/routes.config\";\nimport { RouteConfig } from \"@models/routes.types\";\nimport { Outlet, useNavigate, useLocation } from \"react-router-dom\"; // Import useLocation\nimport { useCallback, useMemo } from \"react\"; // Use useMemo for computed values\nimport appRoutes from \"@routes/routePaths\";\n\n// Import icons for your settings sub-pages (make sure these are installed, e.g., @mui/icons-material)\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport NotificationsActiveIcon from '@mui/icons-material/NotificationsActive';\nimport PaletteIcon from '@mui/icons-material/Palette';\nimport WarningIcon from '@mui/icons-material/Warning';\n\n\nfunction SettingsPage() {\n    const navigate = useNavigate();\n    const location = useLocation(); // Get the current location object\n\n    // Find the main 'Settings' route object from your config\n    // We need to reliably get the parent 'Settings' route to access its children\n    const settingsParentRoute = useMemo(() => {\n        // You'll need to adapt findRouteByPath or create a new utility\n        // that specifically finds a parent route by its base path.\n        // For now, let's assume 'routeConfig' is an array of top-level routes\n        // and we can iterate to find the 'Settings' route.\n        const appMainRoute = routeConfig.find(route => route.id === 'app');\n        if (appMainRoute && appMainRoute.children) {\n            return appMainRoute.children.find(route => route.id === 'Settings');\n        }\n        return undefined;\n    }, []); // This memoizes the result, so it only runs once\n\n    // Get the children of the Settings route that should be displayed in the sidebar/navigation\n    const navigableSettingsChildren = useMemo(() => {\n        if (!settingsParentRoute || !settingsParentRoute.children) {\n            return [];\n        }\n        // Filter out children that should not be shown in the sidebar\n        // (e.g., the `index: true` default route if you don't want it explicitly listed)\n        return settingsParentRoute.children.filter(child =>\n            child.showInSidebar && !child.index\n        );\n    }, [settingsParentRoute]);\n\n\n    const handleNavigationClick = useCallback((relativePath: string) => {\n        // Construct the full absolute path\n        const fullPath = `${appRoutes.SETTINGS}/${relativePath}`;\n        navigate(fullPath);\n    }, [navigate]);\n\n    // Determine the currently active tab for styling the ListItemButton\n    const getIsActive = useCallback((childRoutePath: string) => {\n        // location.pathname will be '/settings/profile', '/settings/notifications', etc.\n        // childRoutePath will be 'profile', 'notifications', etc.\n        // We need to compare the full path, or check if location.pathname ends with the child's relative path\n        const fullChildPath = childRoutePath;\n        return location.pathname === fullChildPath;\n    }, [location.pathname]);\n\n    // Function to get the icon component based on metadata.icon\n    const getIconComponent = (icon: any) => {\n        if (typeof icon === 'function') { // Assuming Material-UI icons are components\n            const IconComponent = icon;\n            return <IconComponent />;\n        }\n        // Handle string icons or other cases if needed\n        return null;\n    };\n\n\n    if (!settingsParentRoute) {\n        // Handle case where settings parent route is not found (shouldn't happen if config is correct)\n        return <Box>Error: Settings route configuration not found.</Box>;\n    }\n\n\n    return (\n        <Stack direction={\"row\"} spacing={2} sx={{ height: \"100%\", width: '100%' }}>\n            <Box sx={{ width: 240, borderRight: 1, borderColor: 'divider', p: 2 }}>\n                {\n                    navigableSettingsChildren.map((childRoute: RouteConfig) => {\n                        // Ensure childRoute.path exists for relative navigation\n                        if (!childRoute.path) return null;\n\n                        return (\n                            <ListItem key={childRoute.id} disablePadding>\n                                <ListItemButton\n                                    onClick={() => handleNavigationClick(childRoute.path as string)}\n                                    selected={getIsActive(childRoute.path as string)} // Highlight active button\n                                >\n                                    {childRoute.metadata?.icon && (\n                                        <ListItemIcon>\n                                            {getIconComponent(childRoute.metadata.icon)}\n                                        </ListItemIcon>\n                                    )}\n                                    <ListItemText\n                                        primary={childRoute.metadata?.title || childRoute.id}\n                                    />\n                                </ListItemButton>\n                            </ListItem>\n                        );\n                    })\n                }\n            </Box>\n            {/* Right Box for Content */}\n            <Box sx={{ flexGrow: 1, p: 2, overflowY: 'auto' }}>\n                <Outlet />\n            </Box>\n        </Stack>\n    );\n}\n\nexport default SettingsPage;"],"names":["SettingsPage","navigate","useNavigate","location","useLocation","settingsParentRoute","useMemo","appMainRoute","routeConfig","route","navigableSettingsChildren","child","handleNavigationClick","useCallback","relativePath","fullPath","appRoutes","getIsActive","childRoutePath","fullChildPath","getIconComponent","icon","IconComponent","jsxs","Stack","jsx","Box","childRoute","ListItem","ListItemButton","_a","ListItemIcon","ListItemText","_b","Outlet"],"mappings":"wcAeA,SAASA,GAAe,CACpB,MAAMC,EAAWC,EAAY,EACvBC,EAAWC,EAAY,EAIvBC,EAAsBC,EAAAA,QAAQ,IAAM,CAKtC,MAAMC,EAAeC,EAAY,KAAcC,GAAAA,EAAM,KAAO,KAAK,EAC7D,GAAAF,GAAgBA,EAAa,SAC7B,OAAOA,EAAa,SAAS,KAAcE,GAAAA,EAAM,KAAO,UAAU,CAG1E,EAAG,EAAE,EAGCC,EAA4BJ,EAAAA,QAAQ,IAClC,CAACD,GAAuB,CAACA,EAAoB,SACtC,CAAC,EAILA,EAAoB,SAAS,OAChCM,GAAAA,EAAM,eAAiB,CAACA,EAAM,KAClC,EACD,CAACN,CAAmB,CAAC,EAGlBO,EAAwBC,cAAaC,GAAyB,CAEhE,MAAMC,EAAW,GAAGC,EAAU,QAAQ,IAAIF,CAAY,GACtDb,EAASc,CAAQ,CAAA,EAClB,CAACd,CAAQ,CAAC,EAGPgB,EAAcJ,cAAaK,GAA2B,CAIxD,MAAMC,EAAgBD,EACtB,OAAOf,EAAS,WAAagB,CAAA,EAC9B,CAAChB,EAAS,QAAQ,CAAC,EAGhBiB,EAAoBC,GAAc,CAChC,GAAA,OAAOA,GAAS,WAAY,CAC5B,MAAMC,EAAgBD,EACtB,aAAQC,EAAc,EAAA,CAAA,CAGnB,OAAA,IACX,EAGA,OAAKjB,EAOAkB,EAAA,KAAAC,EAAA,CAAM,UAAW,MAAO,QAAS,EAAG,GAAI,CAAE,OAAQ,OAAQ,MAAO,MAAA,EAC9D,SAAA,CAAAC,EAAA,IAACC,EAAI,CAAA,GAAI,CAAE,MAAO,IAAK,YAAa,EAAG,YAAa,UAAW,EAAG,CAAE,EAE5D,SAA0BhB,EAAA,IAAKiB,GAA4B,SAEnD,OAACA,EAAW,KAGZF,EAAAA,IAACG,EAA6B,CAAA,eAAc,GACxC,SAAAL,EAAA,KAACM,EAAA,CACG,QAAS,IAAMjB,EAAsBe,EAAW,IAAc,EAC9D,SAAUV,EAAYU,EAAW,IAAc,EAE9C,SAAA,GAAWG,EAAAH,EAAA,WAAA,YAAAG,EAAU,OACjBL,EAAAA,IAAAM,EAAA,CACI,WAAiBJ,EAAW,SAAS,IAAI,CAC9C,CAAA,EAEJF,EAAA,IAACO,EAAA,CACG,UAASC,EAAAN,EAAW,WAAX,YAAAM,EAAqB,QAASN,EAAW,EAAA,CAAA,CACtD,CAAA,CAAA,CACJ,EAbWA,EAAW,EAc1B,EAjByB,IAmBhC,CAAA,EAET,EAECF,EAAA,IAAAC,EAAA,CAAI,GAAI,CAAE,SAAU,EAAG,EAAG,EAAG,UAAW,MAAA,EACrC,SAAAD,EAAAA,IAACS,IAAO,CACZ,CAAA,CAAA,EACJ,EApCOT,EAAA,IAACC,GAAI,SAA8C,gDAAA,CAAA,CAsClE"}