{"version":3,"file":"OrganizationForm-vMXyPadJ.js","sources":["../../src/components/Forms/OrganizationForm.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Controller, useForm, SubmitHandler } from 'react-hook-form';\nimport { TextField, Grid, Button, Box } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport dayjs, { Dayjs } from 'dayjs'; // Import Dayjs\n\ninterface OrganizationFormValues {\n    _id: string;\n    name: string;\n    category: string;\n    number: string;\n    contactEmail: string;\n    contactPhone: string;\n    website: string;\n    logo: string;\n    establishedDate: Dayjs | null;\n    description: string;\n}\n\ninterface OrganizationFormProps {\n    initialValues?: Partial<OrganizationFormValues>;\n    onSubmit: SubmitHandler<OrganizationFormValues>;\n    onClose: () => void;\n}\n\nconst OrganizationForm: React.FC<OrganizationFormProps> = ({ initialValues, onSubmit, onClose }) => {\n    const defaultValues = {\n        _id: '',\n        name: '',\n        category: '',\n        number: '',\n        contactEmail: '',\n        contactPhone: '',\n        website: '',\n        logo: '',\n        establishedDate: null,\n        description: '',\n    }\n\n    const { control, handleSubmit, formState: { errors }, reset } = useForm<OrganizationFormValues>({\n        defaultValues: defaultValues,\n    });\n\n    useEffect(() => {\n        if (initialValues) {\n            reset({\n                ...initialValues,\n                establishedDate: initialValues.establishedDate ? dayjs(initialValues.establishedDate) : null,\n            });\n        }\n    }, [initialValues, reset]);\n\n\n    const onSubmitForm: SubmitHandler<OrganizationFormValues> = (data) => {\n        // console.log(data)\n        const formattedData = {\n            ...data,\n            establishedDate: data.establishedDate ? data.establishedDate.format('YYYY-MM-DD') : null,\n        };\n        onSubmit(formattedData);\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmitForm)}>\n            <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"name\"\n                        control={control}\n                        rules={{ required: 'Name is required' }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Name\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.name}\n                                helperText={errors.name?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"category\"\n                        control={control}\n                        rules={{ required: 'Category is required' }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Category\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.category}\n                                helperText={errors.category?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"number\"\n                        control={control}\n                        rules={{ required: 'Number is required' }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Number\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.number}\n                                helperText={errors.number?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"contactEmail\"\n                        control={control}\n                        rules={{\n                            required: 'Contact email is required',\n                            pattern: {\n                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                message: \"Invalid email address\"\n                            }\n                        }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Contact Email\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.contactEmail}\n                                helperText={errors.contactEmail?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"contactPhone\"\n                        control={control}\n                        rules={{\n                            required: 'Contact phone is required',\n                            pattern: {\n                                value: /^[0-9]{10}$/,\n                                message: \"Invalid phone number\"\n                            }\n                        }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Contact Phone\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.contactPhone}\n                                helperText={errors.contactPhone?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"website\"\n                        control={control}\n                        rules={{\n                            required: 'Website is required',\n                            pattern: {\n                                value: /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/,\n                                message: \"Invalid website URL\"\n                            }\n                        }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Website\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.website}\n                                helperText={errors.website?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"logo\"\n                        control={control}\n                        rules={{ required: 'Logo URL is required' }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Logo URL\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.logo}\n                                helperText={errors.logo?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"establishedDate\"\n                        control={control}\n                        rules={{ required: 'Established date is required' }}\n                        render={({ field }) => (\n                            <DatePicker\n                                label=\"Established Date\"\n                                value={field.value} // Use value from react-hook-form (Dayjs object)\n                                onChange={(date: Dayjs | null) => field.onChange(date)} // Update value as Dayjs object\n                                slotProps={{\n                                    textField: {\n                                        size: 'small',\n                                        fullWidth: true,\n                                        margin: \"normal\",\n                                        error: !!errors.establishedDate,\n                                        helperText: errors.establishedDate?.message,\n                                    },\n                                }}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Controller\n                        name=\"description\"\n                        control={control}\n                        rules={{ required: 'Description is required' }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                size='small'\n                                label=\"Description\"\n                                fullWidth\n                                multiline\n                                rows={4}\n                                margin=\"normal\"\n                                error={!!errors.description}\n                                helperText={errors.description?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => { reset(defaultValues); onClose(); }}>\n                            Cancel\n                        </Button>\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                            Save\n                        </Button>\n                    </Box>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n\nexport default OrganizationForm;\n"],"names":["OrganizationForm","initialValues","onSubmit","onClose","defaultValues","control","handleSubmit","errors","reset","useForm","useEffect","dayjs","onSubmitForm","data","formattedData","jsx","jsxs","Grid","Controller","field","TextField","_a","DatePicker","date","Box","Button"],"mappings":"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"}