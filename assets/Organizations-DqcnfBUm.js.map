{"version":3,"mappings":"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","names":["ROLES","user","org","teacher","hasPermission","resource","action","data","role","permission","_a","fetchOrganizations","params","dispatch","queryParams","parseQueryParams","fetchOrganizationsStart","response","AsyncorganizationApi","fetchOrganizationsSuccess","error","toast","_b","fetchOrganizationById","id","fetchOrganizationByIdStart","fetchOrganizationByIdSuccess","createOrganization","organization","createOrganizationStart","createOrganizationSuccess","updateOrganization","updateOrganizationStart","updateOrganizationSuccess","deleteOrganization","deleteOrganizationStart","deleteOrganizationSuccess","organizationActions","OrganizationForm","lazy","GenericModal","__vitePreload","Organizations","useDispatch","columns","useMemo","rowModesModel","setRowModesModel","useState","open","setOpen","modalTitle","setModalTitle","selectedRow","setSelectedRow","organizations","loading","useSelector","state","accessibleOrganizations","fetchOrganizationsCallback","useCallback","setParams","usePaginationParams","onParamasChange","handleAdd","handleOpen","handleEdit","selectedOrganization","handleDelete","handleSave","handleClose","handleReloadData","totalRows","jsxs","Box","jsx","ReusableDataGrid","Suspense"],"ignoreList":[],"sources":["../../src/utils/auth.ts","../../src/redux/actions/organization.actions.ts","../../src/pages/Organizations.tsx"],"sourcesContent":["import { Organization } from \"@models/organization.modal\";\nimport { Parent } from \"@models/parent.models\";\nimport { Student } from \"@models/student.models\";\nimport { Teacher } from \"@models/teacher.modals\";\nimport { User } from \"@models/user.modals\";\n\nexport type Role = 'ADMIN' | 'TEACHER' | 'STUDENT' | 'PARENT' | 'ORGADMIN';\n\n\ntype PermissionCheck<Key extends keyof Permissions> =\n    | boolean\n    | ((user: User, data: Permissions[Key][\"dataType\"]) => boolean)\n\ntype RolesWithPermissions = {\n    [R in Role]: Partial<{\n        [Key in keyof Permissions]: Partial<{\n            [Action in Permissions[Key][\"action\"]]: PermissionCheck<Key>\n        }>\n    }>\n}\n\ntype Permissions = {\n    organizations: {\n        dataType: Organization\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    teachers: {\n        dataType: Teacher\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    students: {\n        dataType: Student\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    parents: {\n        dataType: Parent\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    departments: {\n        dataType: 'departments'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    classes: {\n        dataType: 'classes'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    courses: {\n        dataType: 'courses'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    events: {\n        dataType: 'events'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    assignments: {\n        dataType: 'assignments'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    exams: {\n        dataType: 'exams'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    attendances: {\n        dataType: 'attendances'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    notifications: {\n        dataType: 'notifications'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n    settings: {\n        dataType: 'settings'//remove this and add actual data type\n        action: \"view\" | \"create\" | \"update\" | \"delete\"\n    }\n}\n\nconst ROLES = {\n    ADMIN: {\n        organizations: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        teachers: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        students: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        parents: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        departments: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        classes: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        courses: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        events: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        assignments: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        exams: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        attendances: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        notifications: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        },\n        settings: {\n            view: true,\n            create: true,\n            update: true,\n            delete: true\n        }\n\n    },\n    TEACHER: {\n        organizations: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        teachers: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: false,\n            update: (user: any, teacher: any) => user.id === teacher.id,\n            delete: false\n        },\n        students: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: false,\n            update: false,\n            delete: false\n        },\n        parents: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: false,\n            update: false,\n            delete: false\n        },\n        departments: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: false,\n            update: false,\n            delete: false\n        },\n        classes: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: false,\n            update: false,\n            delete: false\n        },\n        courses: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: false,\n            update: false,\n            delete: false\n        },\n        events: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            update: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            delete: false\n        },\n        assignments: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            update: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            delete: (user: any, teacher: any) => user.organizationId === teacher.organizationId\n        },\n        exams: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            update: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            delete: (user: any, teacher: any) => user.organizationId === teacher.organizationId\n        },\n        attendances: {\n            view: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            create: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            update: (user: any, teacher: any) => user.organizationId === teacher.organizationId,\n            delete: (user: any, teacher: any) => user.organizationId === teacher.organizationId\n        },\n        notifications: {\n            view: true,\n            create: false,\n            update: false,\n            delete: false\n        },\n        settings: {\n            view: true,\n            create: true,\n            update: true,\n            delete: false\n        }\n    },\n    STUDENT: {\n        organizations: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        teachers: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        students: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: (user: any, org: any) => user.organizationId === org._id,\n            delete: false\n        },\n        parents: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        departments: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        classes: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        courses: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        events: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        assignments: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        exams: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        attendances: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        notifications: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        settings: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        }\n    },\n    PARENT: {\n        organizations: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        teachers: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        students: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        parents: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        departments: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        classes: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        courses: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        events: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        assignments: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        exams: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        attendances: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        notifications: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        settings: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        }\n    },\n    ORGADMIN: {\n        organizations: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        teachers: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        students: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        parents: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        departments: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        classes: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        courses: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        events: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        assignments: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        exams: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        attendances: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        notifications: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        },\n        settings: {\n            view: (user: any, org: any) => user.organizationId === org._id,\n            create: false,\n            update: false,\n            delete: false\n        }\n    },\n} as const satisfies RolesWithPermissions\n\n\nexport function hasPermission<Resource extends keyof Permissions>(\n    user: User,\n    resource: Resource,\n    action: Permissions[Resource][\"action\"],\n    data?: Permissions[Resource][\"dataType\"]\n): boolean {\n    // console.log(user)\n    // console.log(resource)\n    const role = user.role as keyof RolesWithPermissions;\n    // console.log(role)\n    const permission = (ROLES as RolesWithPermissions)[role][resource]?.[action];\n    // console.log(permission)\n\n    if (permission == null) return false;\n    // console.log(data)\n    if (typeof permission === \"boolean\") return permission;\n    return data != null && permission(user, data);\n}\n","//create organization actions to dispatch\nimport { organizationApi } from '../../api/organization.api';\nimport { Organization } from '../../models/organization.modal';\nimport { AppDispatch } from '../store';\nimport { createOrganizationStart, createOrganizationSuccess, deleteOrganizationStart, deleteOrganizationSuccess, fetchOrganizationByIdStart, fetchOrganizationByIdSuccess, fetchOrganizationsStart, fetchOrganizationsSuccess, updateOrganizationStart, updateOrganizationSuccess } from '../slices/organization.slice';\nimport { toast } from 'react-toastify';\nimport { AsyncorganizationApi } from '@api/api';\nimport { Params } from '@models/pagination.modals';\nimport { parseQueryParams } from '@utils/parseQueryParams';\n\nconst fetchOrganizations = (params: Params) => async (dispatch: AppDispatch) => {\n    try {\n        const queryParams = parseQueryParams(params);\n\n        dispatch(fetchOrganizationsStart());\n        const response = await AsyncorganizationApi.getOrganizations(queryParams);\n        console.log(response)\n        dispatch(fetchOrganizationsSuccess(response.data.data));\n    } catch (error) {\n        toast.error(error.response?.data?.data || 'Failed to fetch organizations', {\n            autoClose: 3000,\n        });\n    }\n};\n\nconst fetchOrganizationById = (id: string) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(fetchOrganizationByIdStart()); // Set loading state to true\n        const response = await AsyncorganizationApi.getOrganizationById(id);\n        // console.log(response.data)\n        dispatch(fetchOrganizationByIdSuccess(response.data.data)); // Pass data to success action\n    } catch (error) {\n        toast.error(error.response.data.data || 'Failed to fetch organization', {\n            autoClose: 3000, // Auto close after 3 seconds\n        });\n    }\n};\n\nconst createOrganization = (organization: Omit<Organization, 'createdAt' | 'updatedAt'>) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(createOrganizationStart()); // Set loading state to true\n        const response = await AsyncorganizationApi.createOrganization(organization);\n        dispatch(createOrganizationSuccess(response.data.data)); // Pass data to success action\n        return response.data;\n    } catch (error) {\n        toast.error(error.response.data.data || 'Failed to fetch organization', {\n            autoClose: 3000, // Auto close after 3 seconds\n        });\n    }\n};\n\nconst updateOrganization = (organization: Omit<Organization, 'createdAt' | 'updatedAt'>) => async (dispatch: AppDispatch) => {\n    try {\n        // console.log(organization)\n        dispatch(updateOrganizationStart()); // Set loading state to true\n        const response = await AsyncorganizationApi.updateOrganization(organization, organization.id);\n        dispatch(updateOrganizationSuccess(response.data.data)); // Pass data to success action\n        return response.data;\n    } catch (error) {\n        toast.error(error.response.data.data || 'Failed to fetch organization', {\n            autoClose: 3000, // Auto close after 3 seconds\n        });\n    }\n};\n\nconst deleteOrganization = (id: string) => async (dispatch: AppDispatch) => {\n    try {\n        dispatch(deleteOrganizationStart());\n        const response = await AsyncorganizationApi.deleteOrganization(id);\n        dispatch(deleteOrganizationSuccess(id));\n        toast.info('Organization deleted successfully', {\n            autoClose: 3000,\n        });\n    } catch (error) {\n        toast.error((error as { response?: { data?: { data?: string } } })?.response?.data?.data || 'Failed to fetch organization', {\n            autoClose: 3000,\n        });\n    }\n};\n\n\nexport const organizationActions = {\n    fetchOrganizations,\n    fetchOrganizationById,\n    createOrganization,\n    updateOrganization,\n    deleteOrganization,\n}","import { GridColDef, GridRowId, GridRowModesModel } from '@mui/x-data-grid'\nimport { lazy, Suspense, useCallback, useMemo, useState } from 'react'\nimport { Box } from '@mui/material'\nimport { AppDispatch, RootState } from '@redux/store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { hasPermission } from \"@utils/auth.ts\";\nimport { organizationActions } from \"@redux/actions/organization.actions.ts\";\nimport { ReusableDataGrid } from \"@components/ReusableDataGrid.tsx\";\nimport { Params } from '@models/pagination.modals'\nimport { usePaginationParams } from '@hooks/usePaginationParams'\nconst OrganizationForm = lazy(() => import(\"@components/Forms/OrganizationForm\"));\nconst GenericModal = lazy(() => import(\"@components/GenericModal\"));\n\n/**\n * Organizations component displays a data grid of organizations with CRUD operations.\n * \n * @returns The Organizations component.\n */\nfunction Organizations() {\n\n    const dispatch = useDispatch<AppDispatch>()\n\n    /**\n     * Defines the columns for the data grid.\n     * \n     * @returns An array of column definitions.\n     */\n    const columns: GridColDef[] = useMemo(() => [\n        { field: 'name', headerName: 'Name', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'category', headerName: 'Category', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'number', headerName: 'Number', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'contactEmail', headerName: 'Contact Email', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'contactPhone', headerName: 'Contact Phone', flex: 1, editable: true, headerClassName: 'theme--header' },\n        // {field: 'website', headerName: 'Website', flex: 1, editable: true, headerClassName: 'theme--header'},\n        // {field: 'logo', headerName: 'Logo', flex: 1, editable: true, headerClassName: 'theme--header'},\n        {\n            field: 'establishedDate',\n            headerName: 'Established Date',\n            flex: 1,\n            editable: true,\n            headerClassName: 'theme--header'\n        },\n        { field: 'description', headerName: 'Description', flex: 1, editable: true, headerClassName: 'theme--header' },\n    ], []);\n\n    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\n    const [open, setOpen] = useState(false);\n    const [modalTitle, setModalTitle] = useState<string | undefined>(undefined);\n    const [selectedRow, setSelectedRow] = useState<any>(null);\n    const { data: organizations, loading } = useSelector((state: RootState) => state.organization);\n    const user = useSelector((state: RootState) => state.auth.user);\n\n    /**\n     * Filters organizations based on user permissions.\n     * \n     * @returns An array of accessible organizations.\n     */\n    const accessibleOrganizations = useMemo(() => {\n        if (!user || !organizations?.organizations) return [];\n        return organizations.organizations.filter((org) =>\n            hasPermission(user, \"organizations\", \"view\", org)\n        );\n    }, [user, organizations]);\n\n    const fetchOrganizationsCallback = useCallback(\n        (params: Params) => {\n            dispatch(organizationActions.fetchOrganizations(params));\n        },\n        [dispatch]\n    );\n\n    const { params, setParams } = usePaginationParams(\n        {\n            page: 1,\n            limit: 10,\n            sortBy: undefined,\n            sortOrder: undefined,\n            searchTerm: undefined,\n            filters: {},\n        },\n        fetchOrganizationsCallback\n    );\n\n    const onParamasChange = (params: Params) => {\n        setParams(params);\n    };\n    /**\n     * Handles the add organization action.\n     */\n    const handleAdd = () => {\n        setSelectedRow(null);\n        setModalTitle('Add Organization');\n        handleOpen();\n    };\n\n    /**\n     * Handles the edit organization action.\n     * \n     * @param {GridRowId} id - The ID of the organization to edit.\n     */\n    const handleEdit = (id: GridRowId) => {\n        const selectedOrganization = organizations?.organizations.find((org: any) => org._id === id); // Find the row by ID\n        console.log(\"selectedOrganization\", selectedOrganization)\n        setSelectedRow(selectedOrganization);\n        setModalTitle('Edit Organization');\n        handleOpen()\n    };\n\n    /**\n     * Handles the delete organization action.\n     * \n     * @param {string} id - The ID of the organization to delete.\n     */\n    const handleDelete = async (id: string) => {\n        dispatch(organizationActions.deleteOrganization(id));\n    };\n\n    /**\n     * Handles the save organization action.\n     * \n     * @param {any} data - The data to save.\n     */\n    const handleSave = async (data: any) => {\n        if (selectedRow) {\n            dispatch(organizationActions.updateOrganization({ id: selectedRow._id, ...data }));\n        } else {\n            dispatch(organizationActions.createOrganization(data));\n        }\n        handleClose();\n    };\n\n    /**\n     * Handles the reload data action.\n     */\n    const handleReloadData = () => {\n        dispatch(organizationActions.fetchOrganizations(params));\n    };\n\n    /**\n     * Opens the modal.\n     */\n    const handleOpen = () => setOpen(true);\n    /**\n     * Closes the modal.\n     */\n    const handleClose = () => setOpen(false);\n\n    const totalRows = organizations?.totalOrganizations || 0;\n\n    return (\n        <Box sx={{\n            width: '100%',\n            height: '100%',\n            minWidth: 0, // Add min-width constraint\n            overflow: 'hidden',\n        }}>\n            <ReusableDataGrid\n                columns={columns}\n                onAdd={handleAdd}\n                onDelete={handleDelete}\n                onEdit={handleEdit}\n                rows={accessibleOrganizations ?? []}\n                rowModesModel={rowModesModel}\n                setRowModesModel={setRowModesModel}\n                loading={loading}\n                reloadData={handleReloadData}\n                totalRows={totalRows}\n                paginationModel={{\n                    page: params.page - 1, // if DataGrid is 0-based\n                    pageSize: params.limit,\n                }}\n                onParamsChange={(params) => onParamasChange(params)}\n            />\n            {open && (\n                <Suspense fallback={<div>Loading modal...</div>}>\n                    <GenericModal\n                        open={open}\n                        onClose={handleClose}\n                        title={modalTitle}\n                    >\n                        <Suspense fallback={<div>Loading form...</div>}>\n                            <OrganizationForm\n                                initialValues={selectedRow}\n                                onSubmit={handleSave}\n                                onClose={handleClose}\n                            />\n                        </Suspense>\n                    </GenericModal>\n                </Suspense>\n            )}\n        </Box>\n    );\n}\n\nexport default Organizations;"],"file":"assets/Organizations-DqcnfBUm.js"}