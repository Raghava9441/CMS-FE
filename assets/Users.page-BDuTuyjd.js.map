{"version":3,"file":"Users.page-BDuTuyjd.js","sources":["../../src/components/Forms/UsersForm.tsx","../../src/pages/Users.page.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { Controller, useForm, SubmitHandler } from 'react-hook-form';\nimport { TextField, Grid, Button, Box, Select, MenuItem, FormControl, InputLabel, FormHelperText, Switch, FormControlLabel, Typography } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { RootState } from '../../redux/store';\nimport { useSelector } from 'react-redux';\n\ninterface Address {\n    street?: string;\n    city?: string;\n    state?: string;\n    zip?: string;\n    country?: string;\n}\n\ninterface SocialLinks {\n    facebook?: string;\n    twitter?: string;\n    linkedin?: string;\n    instagram?: string;\n}\n\ninterface Preferences {\n    notifications?: boolean;\n    language?: string;\n    theme?: string;\n    timezone?: string;\n    currency?: string;\n    dateFormat?: string;\n}\n\ninterface Organization {\n    id: string;\n    name: string;\n}\n\ninterface UserFormValues {\n    _id: string;\n    organizations: Organization | Organization[];\n    organizationId: string;\n    username: string;\n    email: string;\n    fullname: string;\n    avatar: string;\n    coverImage?: string;\n    age?: string;\n    role: 'ADMIN' | 'TEACHER' | 'STUDENT' | 'PARENT';\n    gender: 'male' | 'female' | 'other';\n    phone?: string;\n    address?: Address;\n    status?: 'active' | 'inactive';\n    dateOfBirth?: Dayjs | null;\n    biography?: string;\n    permissions?: string[];\n    socialLinks?: SocialLinks;\n    preferences?: Preferences;\n    createdAt?: Dayjs | null;\n    updatedAt?: Dayjs | null;\n}\n\ninterface UserFormProps {\n    initialValues?: Partial<UserFormValues>;\n    onSubmit: SubmitHandler<UserFormValues>;\n    onClose: () => void;\n}\n\nconst UsersForm: React.FC<UserFormProps> = ({ initialValues, onSubmit, onClose }) => {\n    const { data } = useSelector((state: RootState) => state.organization);\n    const organizations = data?.organizations?.map(org => ({ id: org._id, name: org.name }));\n\n    const defaultValues: UserFormValues = {\n        _id: '',\n        organizations: organizations || [],\n        organizationId: organizations ? organizations[0].id : '',\n        username: '',\n        email: '',\n        fullname: '',\n        avatar: '',\n        coverImage: '',\n        age: '',\n        role: 'STUDENT',\n        gender: 'male',\n        phone: '',\n        address: {\n            street: '',\n            city: '',\n            state: '',\n            zip: '',\n            country: '',\n        },\n        status: 'active',\n        dateOfBirth: null,\n        biography: '',\n        permissions: [],\n        socialLinks: {\n            facebook: '',\n            twitter: '',\n            linkedin: '',\n            instagram: '',\n        },\n        preferences: {\n            notifications: true,\n            language: 'en',\n            theme: 'light',\n            timezone: 'Asia/Kolkata',\n            currency: 'INR',\n            dateFormat: 'DD/MM/YYYY',\n        },\n        createdAt: null,\n        updatedAt: null,\n    };\n\n    const { control, handleSubmit, formState: { errors }, reset } = useForm<UserFormValues>({\n        defaultValues: defaultValues,\n    });\n\n    useEffect(() => {\n        if (initialValues) {\n            reset({\n                ...initialValues,\n                dateOfBirth: initialValues.dateOfBirth ? dayjs(initialValues.dateOfBirth) : null,\n                createdAt: initialValues.createdAt ? dayjs(initialValues.createdAt) : null,\n                updatedAt: initialValues.updatedAt ? dayjs(initialValues.updatedAt) : null,\n            });\n        }\n    }, [initialValues, reset]);\n\n    const onSubmitForm: SubmitHandler<UserFormValues> = (data) => {\n        const formattedData = {\n            ...data,\n            dateOfBirth: data.dateOfBirth ? data.dateOfBirth.format('YYYY-MM-DD') : null,\n            createdAt: data.createdAt ? data.createdAt.format('YYYY-MM-DD') : null,\n            updatedAt: data.updatedAt ? data.updatedAt.format('YYYY-MM-DD') : null,\n            organizations: data.organizations,\n            organizationId: data.organizations ? data.organizations[0].id : '',\n        };\n        onSubmit(formattedData);\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmitForm)}>\n            <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"username\"\n                        control={control}\n                        rules={{ required: 'Username is required' }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Username\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.username}\n                                helperText={errors.username?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"fullname\"\n                        control={control}\n                        rules={{ required: 'Full name is required' }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Full Name\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.fullname}\n                                helperText={errors.fullname?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Controller\n                        name=\"organizations\"\n                        control={control}\n                        rules={{ required: 'At least one organization is required' }}\n                        render={({ field }) => (\n                            <FormControl fullWidth margin=\"normal\" error={!!errors.organizations}>\n                                <InputLabel>Organizations</InputLabel>\n                                <Select\n                                    {...field}\n                                    multiple\n                                    label=\"Organizations\"\n                                    size='small'\n                                    renderValue={(selected) => (\n                                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                                            {selected.map((value) => (\n                                                <Typography key={value} component=\"span\" variant=\"body2\">\n                                                    {organizations?.find(org => org.id === value)?.name}\n                                                </Typography>\n                                            ))}\n                                        </Box>\n                                    )}\n                                >\n                                    {organizations?.map((org) => (\n                                        <MenuItem key={org.id} value={org.id}>\n                                            {org.name}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText>{errors.organizations?.message}</FormHelperText>\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"email\"\n                        size='small'\n                        control={control}\n                        rules={{\n                            required: 'Email is required',\n                            pattern: {\n                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                message: \"Invalid email address\"\n                            }\n                        }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Email\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.email}\n                                helperText={errors.email?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"age\"\n                        control={control}\n                        rules={{\n                            required: 'Age is required',\n                            pattern: {\n                                value: /^[0-9]+$/,\n                                message: \"Age must be a number\"\n                            }\n                        }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Age\"\n                                size='small'\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.age}\n                                helperText={errors.age?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"role\"\n                        control={control}\n                        rules={{ required: 'Role is required' }}\n                        render={({ field }) => (\n                            <FormControl fullWidth margin=\"normal\" error={!!errors.role} size=\"small\">\n                                <InputLabel>Role</InputLabel>\n                                <Select {...field} label=\"Role\">\n                                    <MenuItem value=\"ADMIN\">Admin</MenuItem>\n                                    <MenuItem value=\"TEACHER\">Teacher</MenuItem>\n                                    <MenuItem value=\"STUDENT\">Student</MenuItem>\n                                    <MenuItem value=\"PARENT\">Parent</MenuItem>\n                                </Select>\n                                <FormHelperText>{errors.role?.message}</FormHelperText>\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"gender\"\n                        control={control}\n                        rules={{ required: 'Gender is required' }}\n                        render={({ field }) => (\n                            <FormControl fullWidth margin=\"normal\" error={!!errors.gender} size=\"small\">\n                                <InputLabel>Gender</InputLabel>\n                                <Select {...field} label=\"Gender\">\n                                    <MenuItem value=\"male\">Male</MenuItem>\n                                    <MenuItem value=\"female\">Female</MenuItem>\n                                    <MenuItem value=\"other\">Other</MenuItem>\n                                </Select>\n                                <FormHelperText>{errors.gender?.message}</FormHelperText>\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"phone\"\n                        control={control}\n                        rules={{\n                            pattern: {\n                                value: /^[0-9]{10}$/,\n                                message: \"Invalid phone number\"\n                            }\n                        }}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Phone\"\n                                size=\"small\"\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.phone}\n                                helperText={errors.phone?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"avatar\"\n                        control={control}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Avatar URL\"\n                                size=\"small\"\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.avatar}\n                                helperText={errors.avatar?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"coverImage\"\n                        control={control}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Cover Image URL\"\n                                size=\"small\"\n                                fullWidth\n                                margin=\"normal\"\n                                error={!!errors.coverImage}\n                                helperText={errors.coverImage?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"dateOfBirth\"\n                        control={control}\n                        render={({ field }) => (\n                            <DatePicker\n                                label=\"Date of Birth\"\n                                value={field.value}\n                                onChange={(date: Dayjs | null) => field.onChange(date)}\n                                slotProps={{\n                                    textField: {\n                                        size: 'small',\n                                        fullWidth: true,\n                                        error: !!errors.dateOfBirth,\n                                        helperText: errors.dateOfBirth?.message,\n                                    },\n                                }}\n                            />\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"status\"\n                        control={control}\n                        render={({ field }) => (\n                            // margin: \"dense\",\n                            <FormControl fullWidth margin=\"normal\" error={!!errors.status} size=\"small\">\n                                <InputLabel>Status</InputLabel>\n                                <Select {...field} label=\"Status\">\n                                    <MenuItem value=\"active\">Active</MenuItem>\n                                    <MenuItem value=\"inactive\">Inactive</MenuItem>\n                                </Select>\n                                <FormHelperText>{errors.status?.message}</FormHelperText>\n                            </FormControl>\n                        )}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Controller\n                        name=\"biography\"\n                        control={control}\n                        render={({ field }) => (\n                            <TextField\n                                {...field}\n                                label=\"Biography\"\n                                fullWidth\n                                multiline\n                                rows={4}\n                                margin=\"normal\"\n                                error={!!errors.biography}\n                                helperText={errors.biography?.message}\n                            />\n                        )}\n                    />\n                </Grid>\n                {/* Address fields */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\">Address</Typography>\n                </Grid>\n                {['street', 'city', 'state', 'zip', 'country'].map((field) => (\n                    <Grid item xs={12} md={6} key={field}>\n                        <Controller\n                            name={`address.${field}` as keyof Address}\n                            control={control}\n                            render={({ field: { onChange, value } }) => (\n                                <TextField\n                                    label={field.charAt(0).toUpperCase() + field.slice(1)}\n                                    fullWidth\n                                    margin=\"normal\"\n                                    size='small'\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!errors.address?.[field as keyof Address]}\n                                    helperText={errors.address?.[field as keyof Address]?.message}\n                                />\n                            )}\n                        />\n                    </Grid>\n                ))}\n                {/* Social Links */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\">Social Links</Typography>\n                </Grid>\n                {['facebook', 'twitter', 'linkedin', 'instagram'].map((field) => (\n                    <Grid item xs={12} md={6} key={field}>\n                        <Controller\n                            name={`socialLinks.${field}` as keyof SocialLinks}\n                            control={control}\n                            render={({ field: { onChange, value } }) => (\n                                <TextField\n                                    label={field.charAt(0).toUpperCase() + field.slice(1)}\n                                    fullWidth\n                                    margin=\"normal\"\n                                    size='small'\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!errors.socialLinks?.[field as keyof SocialLinks]}\n                                    helperText={errors.socialLinks?.[field as keyof SocialLinks]?.message}\n                                />\n                            )}\n                        />\n                    </Grid>\n                ))}\n                {/* Preferences */}\n                <Grid item xs={12}>\n                    <Typography variant=\"h6\">Preferences</Typography>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Controller\n                        name=\"preferences.notifications\"\n                        control={control}\n                        render={({ field: { onChange, value } }) => (\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={value}\n                                        onChange={onChange}\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Notifications\"\n                            />\n                        )}\n                    />\n                </Grid>\n                {['language', 'theme', 'timezone', 'currency', 'dateFormat'].map((field) => (\n                    <Grid item xs={12} md={6} key={field}>\n                        <Controller\n                            name={`preferences.${field}` as keyof Preferences}\n                            control={control}\n                            render={({ field: { onChange, value } }) => (\n                                <TextField\n                                    label={field.charAt(0).toUpperCase() + field.slice(1)}\n                                    fullWidth\n                                    margin=\"normal\"\n                                    size='small'\n                                    value={value}\n                                    onChange={onChange}\n                                    error={!!errors.preferences?.[field as keyof Preferences]}\n                                    helperText={errors.preferences?.[field as keyof Preferences]?.message}\n                                />\n                            )}\n                        />\n                    </Grid>\n                ))}\n                <Grid item xs={12}>\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 2 }}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => { reset(defaultValues); onClose(); }}>\n                            Cancel\n                        </Button>\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                            Save\n                        </Button>\n                    </Box>\n                </Grid>\n            </Grid>\n        </form>\n    );\n};\n\nexport default UsersForm;","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, RootState } from \"../redux/store\";\nimport { userActions } from \"../redux/actions/userActions\";\nimport { User } from \"../api/auth.api\";\nimport { Box } from \"@mui/material\";\nimport { GridColDef, GridPaginationModel, GridRowId, GridRowModesModel } from \"@mui/x-data-grid\";\nimport GenericModal from \"@components/GenericModal.tsx\";\nimport UsersForm from \"@components/Forms/UsersForm.tsx\";\nimport { ReusableDataGrid } from \"@components/ReusableDataGrid.tsx\";\nimport { usePaginationParams } from \"@hooks/usePaginationParams\";\nimport { Params } from \"@models/pagination.modals\";\n\n\nfunction UsersPage() {\n\n    const dispatch = useDispatch<AppDispatch>();\n    const [rowModesModel, setRowModesModel] = useState<GridRowModesModel>({});\n    const [modalTitle, setModalTitle] = useState<string>('');\n    const [selectedRow, setSelectedRow] = useState<Partial<User> | null>(null);\n    const [open, setOpen] = useState(false);\n\n    const columns: GridColDef[] = useMemo(() => [\n        { field: 'username', headerName: 'Username', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'email', headerName: 'Email', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'fullname', headerName: 'Full Name', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'role', headerName: 'Role', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'gender', headerName: 'Gender', flex: 1, editable: true, headerClassName: 'theme--header' },\n        { field: 'status', headerName: 'Status', flex: 1, editable: true, headerClassName: 'theme--header' },\n    ], []);\n\n    const { loading, data } = useSelector((state: RootState) => state.user);\n\n    const fetchUsersCallback = useCallback(\n        (params: Params) => {\n            dispatch(userActions.fetchUsers(params));\n        },\n        [dispatch]\n    );\n\n    const { params, setParams } = usePaginationParams(\n        {\n            page: 1,\n            limit: 10,\n            sortBy: undefined,\n            sortOrder: undefined,\n            searchTerm: undefined,\n            filters: {},\n        },\n        fetchUsersCallback\n    );\n\n    const onParamasChange = (params: Params) => {\n        setParams(params);\n        // The useEffect above will trigger the API call\n        console.log(params)\n    };\n\n    const handleAdd = () => {\n        setSelectedRow(null);\n        setModalTitle('Add User');\n        handleOpen();\n    };\n\n    const handleEditUser = (id: GridRowId) => {\n        const selectedUser = data?.users.find((user: User) => user._id === id);\n        setSelectedRow(selectedUser || null);\n        setModalTitle('Edit User');\n        handleOpen();\n    };\n\n    const handleDeleteUser = (userId: string) => {\n        dispatch(userActions.deleteUser(userId));\n    };\n\n    const handleSave = async (formData: Partial<User>) => {\n        if (selectedRow?._id) {\n            // Update existing user\n            dispatch(userActions.updateUser({ ...formData, _id: selectedRow._id }));\n        } else {\n            // Create new user\n            dispatch(userActions.createUser(formData as Omit<User, 'password' | 'accessToken' | 'refreshToken'>));\n        }\n        handleClose();\n    };\n\n    const handleReloadData = () => {\n        dispatch(userActions.fetchUsers(params));\n    };\n\n    const handleOpen = () => setOpen(true);\n\n    const handleClose = () => setOpen(false);\n\n    // Calculate total rows for pagination\n    const totalRows = data?.totalUsers || 0;\n    const rows = data?.users || [];\n\n    return (\n        <Box sx={{ height: '100%' }}>\n            <ReusableDataGrid\n                columns={columns}\n                onAdd={handleAdd}\n                onEdit={handleEditUser}\n                onDelete={handleDeleteUser}\n                rows={data?.users || []}\n                rowModesModel={rowModesModel}\n                setRowModesModel={setRowModesModel}\n                loading={loading}\n                reloadData={handleReloadData}\n                totalRows={totalRows}\n                paginationModel={{\n                    page: params.page - 1, // if DataGrid is 0-based\n                    pageSize: params.limit,\n                }}\n                onParamsChange={(params) => onParamasChange(params)}\n                enableSearch={true}\n                enableFilters={true}\n                enableSorting={true}\n                searchPlaceholder=\"Search users...\"\n                pageSizeOptions={[5, 10, 25, 50, 100]}\n            />\n            <GenericModal\n                open={open}\n                onClose={handleClose}\n                title={modalTitle}\n            >\n                <UsersForm\n                    initialValues={selectedRow}\n                    onSubmit={handleSave}\n                    onClose={handleClose}\n                />\n            </GenericModal>\n        </Box>\n    );\n}\n\nexport default UsersPage;"],"names":["UsersForm","initialValues","onSubmit","onClose","data","useSelector","state","organizations","_a","org","defaultValues","control","handleSubmit","errors","reset","useForm","useEffect","dayjs","onSubmitForm","formattedData","jsx","jsxs","Grid","Controller","field","TextField","FormControl","InputLabel","Select","selected","Box","value","Typography","MenuItem","FormHelperText","DatePicker","date","onChange","_c","_b","FormControlLabel","Switch","Button","UsersPage","dispatch","useDispatch","rowModesModel","setRowModesModel","useState","modalTitle","setModalTitle","selectedRow","setSelectedRow","open","setOpen","columns","useMemo","loading","fetchUsersCallback","useCallback","params","userActions","setParams","usePaginationParams","onParamasChange","handleAdd","handleOpen","handleEditUser","id","selectedUser","user","handleDeleteUser","userId","handleSave","formData","handleClose","handleReloadData","totalRows","ReusableDataGrid","GenericModal"],"mappings":"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"}